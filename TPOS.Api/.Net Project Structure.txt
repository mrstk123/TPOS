Clean architectural pattern:
Clean Architecture is a design pattern that separates an application into different layers based on their responsibility

Domain Project - This project is intended to hold the core business logic (like OrderCalculationService) and domain models.

Application Project - This project contains the use cases(or Application Services), Repository Interfaces, Service Interfaces, Data Transfer Objects-DTOs
(e.g., API and Application Layer, or Application Layer and Domain Layer) and Mappers(handle DTO and entity conversion).
Coordinate interactions between Domain and other layers.

Infrastructure Project - This project is responsible for implementing the interfaces defined in the Application project.
This project deals with infrastructure concerns, such as data access (e.g., Entity Framework DbContext), external services, repositories, and any other implementations that depend on external systems.

Api Project - This project should primarily focus on API controllers and handling HTTP requests. 

# Clean Architecture: Project Structure

## 1. Domain Project
- **Entities**
  - `Domain/Entities/`

## 2. Application Project
- **Repository Interfaces**
  - `Application/Interfaces/Repositories/`
- **IUnitOfWork (interface)**
  - `Application/Interfaces/IUnitOfWork.cs`
- **Models** (Internal Data Transfer)
  - `Application/Models/`
- **IAuthService (interface)**
  - `Application/Interfaces/IAuthService.cs`
- **IDbInitializer (interface)**
  - `Application/Interfaces/IDbInitializer.cs`

## 3. Infrastructure Project
- **Entity Configurations**
  - `Infrastructure/Data/Configurations/`
- **AppDbContext**
  - `Infrastructure/Data/AppDbContext.cs`
- **Repositories**
  - `Infrastructure/Data/Repositories/`
- **UnitOfWork (implementation)**
  - `Infrastructure/Data/UnitOfWork.cs`
- **ClaimsAccessor**
  - `Infrastructure/Security/ClaimsAccessor.cs`
- **AuthService (implementation)**
  - `Infrastructure/Security/AuthService.cs`
- **DbInitializer (implementation)**
  - `Infrastructure/Initialization/DbInitializer.cs`

## 4. Api Project
- **Dtos** (API Data Transfer)
  - `Api/Dtos/`
- **Filters**
  - `Api/Filters/`
- **Controllers**
  - `Api/Controllers/`


Role of the Infrastructure Project
1. EF Core Configurations and AppDbContext:

AppDbContext: This is where you define your Entity Framework Core DbContext. It includes the configuration for connecting to the database and the DbSets for your entities.
EF Core Configurations: This includes configurations for the database provider (e.g., SQL Server, PostgreSQL), connection strings, and any additional EF Core configuration such as Fluent API configurations or migrations.

2. Repository Implementations:

Repositories: Implement repository patterns if you use them. Repositories abstract the data access layer and interact with the DbContext.

3. Service Implementations:

Concrete Services: Implement the interfaces defined in the Core project. This includes business logic services such as AuthService.

4. External Service Integrations:

Third-party Integrations: Include configurations and implementations for integrating with external services, such as payment gateways, email services, or other APIs.

5. Configuration and Setup:

Configurations: Any setup code related to the infrastructure setup, such as setting up dependency injection or configuring services.

Example:
public static class ServiceCollectionExtensions
{
    public static IServiceCollection AddInfrastructureServices(this IServiceCollection services, IConfiguration configuration)
    {
        services.AddDbContext<AppDbContext>(options =>
            options.UseSqlServer(configuration.GetConnectionString("DefaultConnection")));

        services.AddScoped<IAuthService, AuthService>();
        services.AddScoped<IUserRepository, UserRepository>();

        return services;
    }
}
