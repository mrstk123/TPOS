- Db-First Project
- Generate Models by Scaffolding
- Seed UserData in Db First
- UoW (Unit of Work) + Repository Pattern
- AutoMapper
- Direct Use of UnitOfWork and Repositories in Controllers without using Services Layer (under Infrastructure Project)
	but AccountController use the Service layer (does not use UoW + Repository directly) and call AuthService that 
	encapsulates the business logic and interact with the repositories through the UnitOfWork.
- Can use entities as parmeters or return types in API methods by excluding navigation properties in serialization and deserialization
  and if need to customize the model, write separate DTOs.
  Recommendation: Use DTOs (and do not use entities as parameters in API methods) for complex applications
  where you need clear separation and flexibility in handling data across different layers.  
  (See CompanyController and CustomerController that use entity as param)

Auth:
- In a simple project, refresh and revoke token is not needed. (just use Access Token)
- A refresh token is a special token used to obtain a new access token when the current access token expires.
- Revocation is the process of invalidating a token so that it can no longer be used to access protected resources.
- When you revoke a refresh token, you effectively make it unusable for obtaining new access tokens by that refresh token. 
  However, any currently valid access tokens will remain active until they reach their expiration time.

- Single Refresh Token per User - users can stay logged in on multiple devices until their access token expires (does not fully prevent concurrent logins)
  To acheieve or prevent multiple concurrent logins, seaparate into a new table the include
		UserId, Token, Refresh Token, ExpiryTime, Revoked, DeviceInfo, SessionId, UserAgent, ... (see at HR System)

- ClaimsAccessor retrieves claims from the ClaimsPrincipal associated with the current user	
  Microsoft.AspNetCore.Http.Abstractions is deprecated and so add a FrameworkReference instead of a PackageReference, <FrameworkReference Include="Microsoft.AspNetCore.App" />

- a virtual path (in file server) allows users to access files through a simplified and consistent URL 
  without needing to know the underlying physical path. e.g., (/files/reports/2024-01-01-report.pdf) rather than a complicated physical path.


- First writing Controller is CustomerController and return CustomerDto that has Base Columns. 
  Other Api does not return Dto that has Base Columns.

User Accounts:
	UserName: sysadmin
	Password: sysadmin123
	Email: sysadmin@tpos.com

	UserName: admin
	Password: admin123
	Email: admin@tpos.com

	UserName: user
	Password: user123
	Email: user@tpos.com


Dto (Data Transfer Object) is commonly used for classes that represent the data structure for transferring data
between different layers (like between the API and the client).

In Controllers, C# does not support inheritance between entity classes and DTOs directly due to the nature of 
how these are typically used (DTOs being designed to decouple the domain model from the API surface)
*** You generally cannot and should not directly inherit from entities in your DTOs to avoid redefining properties

JWT:
JWTs offer a flexible, scalable, and stateless solution that is well-suited for modern application architectures.
Use Cases: Commonly used in stateless authentication systems, where the server does not need to store session information.
Since the token contains user information and is signed by the server, it can be verified without needing to hit session store
or a database, which is useful in distributed systems.

You typically verify the token(not JWT) against a session store for every request. When a client sends a request with a token(not Jwt):
Lookup: The server checks the session store for the corresponding session associated with the token.
Validation: If the session is found, the server verifies that the session is still valid (e.g., it hasn't expired or been revoked).
Response: If valid, the server processes the request; if not, it returns an error (e.g., unauthorized).

SQL
If Name, Phone, and Address are unique for each Customer, Employee, Branch and Supplier, splitting the tables is not necessary 
from a normalization perspective, as no redundancy exists.
However, if you foresee future scenarios where data (the same record in ContactInfo) might be reused 
across different entities (customers, suppliers, etc.), splitting might still be a good strategy for flexibility.

Need to improve
- File Server
- Logging
- Refresh token
- 2FA
