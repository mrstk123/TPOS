- Db-First Project
- Generate Models by Scaffolding
- Seed UserData in Db First
- UoW (Unit of Work) + Repository Pattern
- Direct Use of UnitOfWork and Repositories in Controllers without using Services Layer (under Infrastructure Project)
	but AccountController use the Service layer (does not use UoW + Repository directly) and call AuthService that 
	encapsulates the business logic and interact with the repositories through the UnitOfWork.
- Can use entities as parmeters or return types in API methods by excluding navigation properties in serialization and deserialization
  and if need to customize the model, write separate DTOs.
  Recommendation: Use DTOs (do not use entities as parameters in API methods) for complex applications
  where you need clear separation and flexibility in handling data across different layers.  
  (See CompanyController and CustomerController)
- AutoMapper

- First writing Controller is CustomerController and return CustomerDto that has Base Columns. 
  Other Api does not return Dto that has Base Columns.

User Accounts:
	UserName: sysadmin
	Password: sysadmin123
	Email: sysadmin@tpos.com

	UserName: admin
	Password: admin123
	Email: admin@tpos.com

	UserName: user
	Password: user123
	Email: user@tpos.com


Dto (Data Transfer Object) is commonly used for classes that represent the data structure for transferring data
between different layers (like between the API and the client).

C# does not support inheritance between entity classes and DTOs directly due to the nature of how these are typically used
(DTOs being designed to decouple the domain model from the API surface)
*** You generally cannot and should not directly inherit from entities in your DTOs to avoid redefining properties

Need to improve
- File Server
- Logging
- Refresh token
- 2FA
