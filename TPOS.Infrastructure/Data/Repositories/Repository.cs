// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using TPOS.Application.Interfaces.Repositories;

namespace TPOS.Infrastructure.Data.Repositories
{
    public class Repository<T> : IRepository<T> where T : class
    {
        protected readonly AppDbContext _context;
        private DbSet<T> _dbSet;

        public Repository(AppDbContext context)
        {
            _context = context;
            _dbSet = context.Set<T>();
        }

        public async Task<T> GetByIdAsync(int id)
        {
            return await _dbSet.FindAsync(id);
        }

        public async Task<IEnumerable<T>> GetAllAsync()
        {
            return await _dbSet.ToListAsync();
        }

        public async Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate)
        {
            return await _dbSet.Where(predicate).ToListAsync();
        }

        public async Task<T> FindFirstOrDefaultAsync(Expression<Func<T, bool>> predicate)
        {
            return await _dbSet.FirstOrDefaultAsync(predicate);
        }

        public async Task AddAsync(T entity)
        {
            await _dbSet.AddAsync(entity);
        }

        public async Task DeleteAsync(int id)
        {
            var entity = await GetByIdAsync(id);
            if (entity != null)
            {
                _dbSet.Remove(entity);
            }
        }

        public void Update(T entity)
        {
            // Option 1: Using Update - marks the entity and all navigation properties as modified
            // Update() will work for an untracked entity. EF Core does not have any prior state to compare against, so it will simply overwrite
            // _dbSet.Update(entity); 

            // Option 2: Using Attach and set state to Modified - only marks the primary entity as modified
            if (_context.Entry(entity).State == EntityState.Detached)
            {
                _dbSet.Attach(entity);
            }
            _context.Entry(entity).State = EntityState.Modified;
        }

        // Implement Methods for batch operations
        public async Task AddRangeAsync(IEnumerable<T> entities)
        {
            await _dbSet.AddRangeAsync(entities);
        }

        public void UpdateRange(IEnumerable<T> entities)
        {
            // Marks the entities in the collection as modified and it does not automatically mark navigation properties as modified
            // UpdateRange() will work even if you queried the entities with no tracking
            _dbSet.UpdateRange(entities);
        }

        public void DeleteRangeAsync(IEnumerable<T> entities)
        {
            _dbSet.RemoveRange(entities);
        }


        // Implement the GetAsync method with filter, orderBy, and include
        public async Task<IEnumerable<T>> GetAsync(
            Expression<Func<T, bool>> filter = null,
            Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
            Func<IQueryable<T>, IIncludableQueryable<T, object>> include = null,
            bool tracking = false)
        {
            var query = PrepareQueryInternal(tracking, filter, orderBy, include);
            return await query.ToListAsync();
        }

        // Implement the GetSingleAsync method with filter and include
        public async Task<T> GetSingleAsync(
            Expression<Func<T, bool>> filter,
            Func<IQueryable<T>, IIncludableQueryable<T, object>> include = null,
            bool tracking = true)
        {
            var query = PrepareQueryInternal(tracking, filter, null, include);
            return await query.SingleOrDefaultAsync();
        }


        #region Helper
        private IQueryable<T> PrepareQueryInternal(bool tracking,
            Expression<Func<T, bool>> filter = null,
            Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null,
            Func<IQueryable<T>, IIncludableQueryable<T, object>> include = null)
        {
            IQueryable<T> query = _dbSet;

            // handle tracking
            if (!tracking)
            {
                query = query.AsNoTracking();
            }

            // handle include
            if (include != null)
            {
                query = include(query);
            }

            // handle filter
            if (filter != null)
            {
                query = query.Where(filter);
            }

            //handle order by
            if (orderBy != null)
            {
                query = orderBy(query);
            }

            return query;
        }
        #endregion
    }
}
