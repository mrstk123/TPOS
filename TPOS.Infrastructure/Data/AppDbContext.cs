// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using TPOS.Domain.Entities.Generated;
using Object = TPOS.Domain.Entities.Generated.Object;

namespace TPOS.Infrastructure.Data;

public partial class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<ContactInfo> ContactInfos { get; set; }

    public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Discount> Discounts { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Inventory> Inventories { get; set; }

    public virtual DbSet<Loyalty> Loyalties { get; set; }

    public virtual DbSet<LoyaltyProg> LoyaltyProgs { get; set; }

    public virtual DbSet<Object> Objects { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductItem> ProductItems { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<SaleItem> SaleItems { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<Tax> Taxes { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfiguration(new EntityConfigurations.BranchConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.CategoryConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.CompanyConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.ContactInfoConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.CurrencyRateConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.CustomerConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.DiscountConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.EmployeeConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.InventoryConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.LoyaltyConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.LoyaltyProgConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.ObjectConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.PaymentConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.ProductConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.ProductCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.ProductItemConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.RoleConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.SaleConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.SaleItemConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.SupplierConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.TaxConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.UserConfiguration());
        modelBuilder.ApplyConfiguration(new EntityConfigurations.UserRoleConfiguration());

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
